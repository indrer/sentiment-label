import numpy as np
#TODO ADD TIME OF VIDEO
'''
video object -
id - should be generated by database
url - video id from youtube
title - video title
upvote - number of upvotes
downvote - number of downvotes
'''

class Video:
    def __init__(self, url, title, upvotes, downvotes, views, commentCount):
        self.url = url
        self.title = title
        self.upvotes = upvotes
        self.downvotes = downvotes
        self.views = views
        self.commentCount = commentCount


def _parse_youtube_url(url):
    return url.replace('\n', '').split('/')[-1]

def _get_categories(service, region='US'):
    response = service.videoCategories().list(
        part='snippet',
        regionCode=region
    ).execute()
    category_list = []
    for item in response['items']:
        category_list.append(item['id'])
    return category_list

def _get_video_data_from_response_item(item):
    video = {}
    video['url'] = item['id']
    video['title'] = item['snippet']['title']
    video['upvote'] = item['statistics']['likeCount']
    video['downvote'] = item['statistics']['dislikeCount']
    video['views'] = item['statistics']['viewCount']
    video['commentCount'] = item['statistics']['commentCount']
    video['date'] = item['snippet']['publishedAt']
    return video


def get_manually_collected_video_ids():
    #manually_collected_video_files = ['dislikedvideos.txt', 'middle.txt', 'likedvideos.txt']
    manually_collected_video_ids = []
    manually_collected_video_files = ['secret_manual.txt']
    # read manually collected videos
    for v in manually_collected_video_files:
        with open(v, 'r') as f:
            for line in f:
                #manually_collected_video_ids.append(_parse_youtube_url(line))
                manually_collected_video_ids.append(line.replace('\n', ''))
    print(manually_collected_video_ids)
    np.random.shuffle(manually_collected_video_ids)
    return manually_collected_video_ids


def get_videos_from_categories(service, region='US', video_num=120, video_part='snippet, statistics', video_chart='mostPopular'):
    random_cat = _get_categories(service, region)
    np.random.shuffle(random_cat)
    video_arr = []
    get_video_num = int(video_num / 10)
    while len(video_arr) < (video_num):
        # some categories don't have most popular videos
        # resulting in an exception. there is no way of knowing
        # which of these will not have them, so
        # catching an exception seem to be the only sane solution
            for cat in random_cat:
                try:
                    response = service.videos().list(
                        part=video_part,
                        chart=video_chart,
                        maxResults=50,
                        regionCode=region,
                        videoCategoryId=str(cat)
                    ).execute()
                    temp_vid_arr = []
                    for item in response['items']:
                        video = _get_video_data_from_response_item(item)
                        temp_vid_arr.append(video)
                    if len(temp_vid_arr) > 0:
                        this_vid_arr = np.random.choice(temp_vid_arr, get_video_num)
                        video_arr.extend(this_vid_arr)
                except Exception as error:
                    continue
    np.random.shuffle(video_arr)
    return list(video_arr)

def fetch_youtube_from_list(service, video_list):
    video_list_string = ','.join(video_list)
    video_objects = []
    for id in video_list:
        try:
            response = service.videos().list(
                part='snippet,statistics',
                id = id
            ).execute()
            for item in response['items']:
                video = _get_video_data_from_response_item(item)
                video_objects.append(video)
        except Exception as error:
            print(error)
    return video_objects

def get_videos(service, region='US', video_num=100, video_part='snippet, statistics', video_chart='mostPopular'):
    # most_popular_videos = get_videos_from_categories(service, region, video_num, video_part, video_chart)
    collected_videos = fetch_youtube_from_list(service, get_manually_collected_video_ids())
    #videos = most_popular_videos + collected_videos
    videos = collected_videos
    np.random.shuffle(videos)
    return list(videos)

